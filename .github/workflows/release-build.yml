name: release-build

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '*.md'
      - 'LICENSE'
    pull_request:
      types: [ opened, synchronize, reopened, closed ]
      branches: [ master ]

env:
  NODE_VERSION: 14
  CURRENT_REPO: grafana-schedule-panel

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.context.outputs.branch }}
      fqn: ${{ steps.fqn.outputs.fqn }}
      shouldBuild: ${{ steps.context.outputs.decision_build }}
      isRelease: ${{ steps.context.outputs.isTag }}
      version: ${{ steps.context.outputs.version }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NUBEIO_CI_COMMITER_PAT }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: false
          gpg-private-key: ${{ secrets.NUBEIO_CI_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.NUBEIO_CI_GPG_PASSPHARSE }}

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v1
        with:
          dry: false
          defaultBranch: master
          mustSign: true

      - name: Project name
        id: fqn
        run: |
          echo ::set-output name=fqn::$(jq -r .name < package.json)-${{ steps.context.outputs.shortCommitId }}

  build:
    runs-on: ubuntu-latest
    needs: context
    if: needs.context.outputs.shouldBuild == 'true'
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cache_yarn
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: YARN install
        if: steps.cache_yarn.outputs.cache-hit != 'true'
        run: yarn install

      - name: YARN build
        run: yarn build

      - name: Zip artifact
        run: zip -rv ${{ needs.context.outputs.fqn }}.zip dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.context.outputs.fqn }}
          path: ${{ needs.context.outputs.fqn }}.zip
          if-no-files-found: 'error'
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [ context, build ]
    if: needs.context.outputs.isRelease == 'true'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.context.outputs.fqn }}
          path: ./
      - name: Create Release
        id: createRelease
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.context.outputs.version }}
          name: Release v${{ needs.context.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./${{ needs.context.outputs.fqn }}.zip

  distribute:
    runs-on: ubuntu-latest
    needs: [ context, build ]
    if: needs.context.outputs.isRelease == 'true'
    steps:
      - name: Create PR in grafana-docker
        run: |
          workflow=create-pr-when-released-plugin.yml
          secret="${{ secrets.NUBEIO_CI_PACKAGES_PAT }}"
          name="${{ env.CURRENT_REPO }}"
          archive="${{ needs.context.outputs.fqn }}.zip"
          data="{\"ref\":\"main\",\"inputs\":{\"name\":\"$name\",\"version\":\"$version\",\"archive\":\"$archive\"}}"
          status=$(curl -X POST \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Authorization: Bearer $secret" \
                      -d "$data" -w "%{http_code}\n" -o out.json \
                      https://api.github.com/repos/nubeio/grafana-docker/actions/workflows/$workflow/dispatches)
          cat out.json
          [[ "$status" =~ ^2[[:digit:]][[:digit:]] ]] || exit 1
