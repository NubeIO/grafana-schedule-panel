name: release-build

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - 'master'

jobs:
  context:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/')
    outputs:
      projectName: ${{ steps.grepProject.outputs.projectName }}
      projectVersion: ${{ steps.grepProject.outputs.targetVersion }}
      commitId: ${{ steps.gitReleaseCommit.outputs.id }}
      shouldRun: ${{ steps.validateVersion.outputs.isSameVersion == 'true' && startsWith(github.head_ref, 'release/') }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.NUBEIO_CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.NUBEIO_CI_GPG_PASSPHARSE }}

      - name: Grep project
        id: grepProject
        shell: bash
        run: |
          targetVersion=$(echo "${{ github.head_ref }}" | sed -e "s#release/##")
          echo ::set-output name=currentVersion::$(cat package.json | jq -r .version)
          echo ::set-output name=projectName::$(head -n 5 package.json | grep name | cut -d ":" -f2 | grep -oP "(?<=\")([^\"]+)(?=\")")
          echo ::set-output name=targetVersion::$targetVersion

      - name: Validate version
        id: validateVersion
        run: |
          echo "Should Validate Version with semantic..."
          echo "Project name: ${{ steps.grepProject.outputs.projectName }}"
          echo "Current version: ${{ steps.grepProject.outputs.currentVersion }}"
          echo "Target version: ${{ steps.grepProject.outputs.targetVersion }}"
          [[ ${{ steps.grepProject.outputs.currentVersion }} == ${{ steps.grepProject.outputs.targetVersion }} ]] && same=true || same=false
          echo "Same version: $same"
          echo ::set-output name=isSameVersion::$same

      - name: Replace version
        if: ${{ steps.validateVersion.outputs.isSameVersion == 'false' }}
        run: |
          jq '.version = "${{ steps.grepProject.outputs.targetVersion }}"' package.json > package.json.tmp && mv package.json.tmp package.json

      - name: GIT commit and push
        if: ${{ steps.validateVersion.outputs.isSameVersion == 'false' }}
        run: |
          git commit -S -am "<ci-auto-commit> Update version"
          git show --show-signature
          git push

  build:
    runs-on: ubuntu-latest
    needs: context
    if: github.event.action != 'closed'
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '14'

      - uses: actions/checkout@v2

      - name: YARN install
        run: yarn install

      - name: YARN test
        run: yarn test

      - name: YARN build
        run: yarn build

  tag:
    runs-on: ubuntu-latest
    needs: context
    if: needs.context.outputs.shouldRun == 'true' && github.event.action == 'closed' && github.event.pull_request.merged
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NUBEIO_CI_GITHUB_GRAFANA_TOKEN }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.NUBEIO_CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.NUBEIO_CI_GPG_PASSPHARSE }}

      - name: GIT tag
        run: |
          git tag -s v${{ needs.context.outputs.projectVersion }} ${{ github.sha }} -m "Release v${{ needs.context.outputs.projectVersion }}"
          git push origin v${{ needs.context.outputs.projectVersion }}
