name: release-delivery

on:
  push:
    tags:
      - 'v*'

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      projectName: ${{ steps.grepProject.outputs.projectName }}
      projectVersion: ${{ steps.grepProject.outputs.targetVersion }}
      commitId: ${{ steps.grepProject.outputs.shaShort }}

    steps:
      - uses: actions/checkout@v2

      - name: Grep project
        id: grepProject
        shell: bash
        run: |
          targetVersion=$(echo "${{ github.ref }}" | sed -e "s#^refs/tags/v##")
          echo ::set-output name=currentVersion::$(cat package.json | jq -r .version)
          echo ::set-output name=projectName::$(head -n 5 package.json | grep name | cut -d ":" -f2 | grep -oP "(?<=\")([^\"]+)(?=\")")
          echo ::set-output name=targetVersion::$targetVersion
          echo ::set-output name=shaShort::$(git rev-parse --short HEAD)

      - name: Validate version
        id: validateVersion
        run: |
          echo "Should Validate Version with semantic..."
          echo "Project name: ${{ steps.grepProject.outputs.projectName }}"
          echo "Current version: ${{ steps.grepProject.outputs.currentVersion }}"
          echo "Target version: ${{ steps.grepProject.outputs.targetVersion }}"
          [[ ${{ steps.grepProject.outputs.currentVersion }} == ${{ steps.grepProject.outputs.targetVersion }} ]] || { echo "Release version and tag version is not match"; exit 1; }

  build-delivery:
    runs-on: ubuntu-latest
    needs: context
    steps:
      - name: Install Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '14'

      - uses: actions/checkout@v2

      - name: YARN install
        run: yarn install

      - name: YARN build
        run: yarn build

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - uses: actions/checkout@v2
        with:
          repository: NubeIO/grafana-schedule-panel-build
          ref: master
          path: grafana-schedule-panel-build
          token: ${{ secrets.NUBEIO_CI_GITHUB_GRAFANA_TOKEN }}

      - name: Clean and Replace data
        working-directory: ./grafana-schedule-panel-build
        run: |
          rm -rf *
          cp -r ../dist/* .

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          workdir: ./grafana-schedule-panel-build
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.NUBEIO_CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.NUBEIO_CI_GPG_PASSPHARSE }}

      - name: GIT commit and push
        working-directory: ./grafana-schedule-panel-build
        run: |
          git add .
          git commit -S -m "<ci-auto-commit> Release ${{ needs.context.outputs.projectName }}-${{ needs.context.outputs.projectVersion }}-${{ needs.context.outputs.commitId }}"
          git tag -s v${{ needs.context.outputs.projectVersion }} -m "Release v${{ needs.context.outputs.projectVersion }}"
          git show v${{ needs.context.outputs.projectVersion }} --show-signature
          git push
          git push origin v${{ needs.context.outputs.projectVersion }}
